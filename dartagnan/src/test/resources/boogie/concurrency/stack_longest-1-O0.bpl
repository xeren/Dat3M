// generated by SMACK version 2.4.1 for corral
// via /usr/local/bin/smack -q -t --no-memory-splitting --clang-options=-DCUSTOM_VERIFIER_ASSERT -O0 -fno-vectorize -fno-slp-vectorize -I./include/ -bpl ./output/stack_longest-1-O0.bpl /Users/ponce/git/Dat3M/./output/stack_longest-1_tmp.c

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (1 regions)
var $M.0: [ref] i8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 72369));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if (i1 < i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if (i2 < i1) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if (i2 < i1) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const flag: ref;
axiom (flag == $sub.ref(0, 1025));
const m: ref;
axiom (m == $sub.ref(0, 2081));
const top: ref;
axiom (top == $sub.ref(0, 3109));
const .str: ref;
axiom (.str == $sub.ref(0, 4149));
const {:count 17} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 5190));
const {:count 800} arr: ref;
axiom (arr == $sub.ref(0, 9414));
const {:count 14} .str.1.3: ref;
axiom (.str.1.3 == $sub.ref(0, 10452));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 11484));
const {:count 3} .str.1.7: ref;
axiom (.str.1.7 == $sub.ref(0, 12511));
const {:count 14} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 13549));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 14577));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 15609));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 2, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 2, 44} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const assume_abort_if_not: ref;
axiom (assume_abort_if_not == $sub.ref(0, 16641));
procedure  assume_abort_if_not($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 5, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "assume_abort_if_not:arg:cond"} boogie_si_record_i32($i0);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 5, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 5, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 6, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 5, 14} true;
  assume {:verifier.code 0} true;
  call abort();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 5, 14} true;
  assume {:verifier.code 0} true;
  assume false;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 17673));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const abort: ref;
axiom (abort == $sub.ref(0, 18705));
procedure  abort();
const error: ref;
axiom (error == $sub.ref(0, 19737));
procedure  error()
{
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 922, 1} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 922, 1} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 923, 11} true;
  assume {:verifier.code 0} true;
  call reach_error();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 923, 25} true;
  assume {:verifier.code 0} true;
  call abort();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 923, 25} true;
  assume {:verifier.code 0} true;
  assume false;
$bb2:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 924, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const inc_top: ref;
axiom (inc_top == $sub.ref(0, 20769));
procedure  inc_top()
{
  var $i0: i32;
  var $i1: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 927, 6} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 927, 6} true;
  assume {:verifier.code 0} true;
  $i0 := $load.i32($M.0, top);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 927, 6} true;
  assume {:verifier.code 0} true;
  $i1 := $add.i32($i0, 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 927, 6} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, top, $i1);
  call {:cexpr "top"} boogie_si_record_i32($i1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 928, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dec_top: ref;
axiom (dec_top == $sub.ref(0, 21801));
procedure  dec_top()
{
  var $i0: i32;
  var $i1: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 931, 6} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 931, 6} true;
  assume {:verifier.code 0} true;
  $i0 := $load.i32($M.0, top);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 931, 6} true;
  assume {:verifier.code 0} true;
  $i1 := $add.i32($i0, $sub.i32(0, 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 931, 6} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, top, $i1);
  call {:cexpr "top"} boogie_si_record_i32($i1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 932, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const get_top: ref;
axiom (get_top == $sub.ref(0, 22833));
procedure  get_top()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 935, 10} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 935, 10} true;
  assume {:verifier.code 0} true;
  $i0 := $load.i32($M.0, top);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 935, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const push: ref;
axiom (push == $sub.ref(0, 23865));
procedure  push($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i5: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 943, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "push:arg:x"} boogie_si_record_i32($i1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 943, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, top);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 943, 10} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 800);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 943, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 945, 5} true;
  assume {:verifier.code 0} true;
  call $i4 := printf.ref(.str);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 946, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 1);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 950, 11} true;
  assume {:verifier.code 0} true;
  call $i6 := get_top();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 950, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i6);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 950, 5} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, $mul.ref($i7, 4));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 950, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, $i1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 951, 5} true;
  assume {:verifier.code 0} true;
  call inc_top();
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 954, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 953, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
}
const printf: ref;
axiom (printf == $sub.ref(0, 24897));
procedure  printf.ref($p0: ref)
  returns ($r: i32);
const pop: ref;
axiom (pop == $sub.ref(0, 25929));
procedure  pop($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i4: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 957, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 957, 7} true;
  assume {:verifier.code 0} true;
  call $i1 := get_top();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 957, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 957, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 959, 5} true;
  assume {:verifier.code 0} true;
  call $i3 := printf.ref(.str.1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 960, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32(0, 2);
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 964, 5} true;
  assume {:verifier.code 0} true;
  call dec_top();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 965, 18} true;
  assume {:verifier.code 0} true;
  call $i5 := get_top();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 965, 12} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i5);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 965, 12} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, $mul.ref($i6, 4));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 965, 12} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $i8;
  goto $bb3;
$bb3:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 968, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const t1: ref;
axiom (t1 == $sub.ref(0, 26961));
procedure  t1($p0: ref)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 973, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 973, 7} true;
  assume {:verifier.code 0} true;
  $i1 := 0;
  goto $bb1;
$bb1:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 973, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i1, 800);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 973, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 975, 5} true;
  assume {:verifier.code 0} true;
  call $i3 := pthread_mutex_lock(m);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 976, 11} true;
  assume {:verifier.code 0} true;
  call $i4 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 977, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $ult.i32($i4, 800);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 977, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 977, 5} true;
  assume {:verifier.code 0} true;
  call assume_abort_if_not($i6);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 978, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := push(arr, $i4);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 978, 22} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, $sub.i32(0, 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i2 == 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 983, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
$bb4:
  assume ($i8 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 979, 7} true;
  assume {:verifier.code 0} true;
  call error();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 979, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 980, 9} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, flag, 1);
  call {:cexpr "flag"} boogie_si_record_i8(1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 981, 5} true;
  assume {:verifier.code 0} true;
  call $i9 := pthread_mutex_unlock(m);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 982, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 973, 22} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i32($i1, 1);
  call {:cexpr "i"} boogie_si_record_i32($i10);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 973, 3} true;
  assume {:verifier.code 0} true;
  $i1 := $i10;
  goto $bb1;
}
const pthread_mutex_lock: ref;
axiom (pthread_mutex_lock == $sub.ref(0, 27993));
procedure  pthread_mutex_lock($p0: ref)
  returns ($r: i32);
const pthread_mutex_unlock: ref;
axiom (pthread_mutex_unlock == $sub.ref(0, 29025));
procedure  pthread_mutex_unlock($p0: ref)
  returns ($r: i32);
const t2: ref;
axiom (t2 == $sub.ref(0, 30057));
procedure  t2($p0: ref)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 988, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i1 := 0;
  goto $bb1;
$bb1:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 988, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i1, 800);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 988, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 990, 5} true;
  assume {:verifier.code 0} true;
  call $i3 := pthread_mutex_lock(m);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 991, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i8($M.0, flag);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 991, 9} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i8.i1($i4);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 991, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i2 == 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 998, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 993, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := pop(arr);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 993, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, $sub.i32(0, 2));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 993, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb7, $bb9;
$bb5:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 991, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 996, 5} true;
  assume {:verifier.code 0} true;
  call $i8 := pthread_mutex_unlock(m);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 997, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 993, 11} true;
  assume {:verifier.code 0} true;
  assume ($i7 == 1);
  goto $bb8;
$bb8:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 995, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb9:
  assume !(($i7 == 1));
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 994, 9} true;
  assume {:verifier.code 0} true;
  call error();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 994, 9} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb10:
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 988, 22} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i1, 1);
  call {:cexpr "i"} boogie_si_record_i32($i9);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 988, 3} true;
  assume {:verifier.code 0} true;
  $i1 := $i9;
  goto $bb1;
}
const main: ref;
axiom (main == $sub.ref(0, 31089));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1003, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1003, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := pthread_mutex_init(m, $0.ref);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1004, 3} true;
  assume {:verifier.code 0} true;
  call $i3 := pthread_create($p0, $0.ref, t1, $0.ref);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1005, 3} true;
  assume {:verifier.code 0} true;
  call $i4 := pthread_create($p1, $0.ref, t2, $0.ref);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1006, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.0, $p0);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1006, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := pthread_join($i5, $0.ref);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1007, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i64($M.0, $p1);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1007, 3} true;
  assume {:verifier.code 0} true;
  call $i8 := pthread_join($i7, $0.ref);
  assume {:sourceloc "./output/stack_longest-1_tmp.c", 1008, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const pthread_mutex_init: ref;
axiom (pthread_mutex_init == $sub.ref(0, 32121));
procedure  pthread_mutex_init($p0: ref, $p1: ref)
  returns ($r: i32);
const pthread_create: ref;
axiom (pthread_create == $sub.ref(0, 33153));
procedure  pthread_create($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: i32);
const pthread_join: ref;
axiom (pthread_join == $sub.ref(0, 34185));
procedure  pthread_join($i0: i64, $p1: ref)
  returns ($r: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 35217));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 36249));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 37281));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 38313));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 39345));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 40377));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 41409));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 42441));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 43473));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 44505));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 45537));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 46569));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 47601));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 48633));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 49665));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 50697));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 22} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
  call {:cexpr "min"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 22} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
  call {:cexpr "max"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i32($i2, 4294967295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i32($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 56} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i32($i2, 4294967295);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i32($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 51729));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 52761));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 53793));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 54825));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 55857));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 56889));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 57921));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 58953));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 59985));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 61017));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 62049));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 63081));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 64113));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 65145));
procedure  __VERIFIER_nondet_uint()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 66177));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 67209));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 68241));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 69273));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 70305));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 71337));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 72369));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.i8($M.0, flag, 0);
  call {:cexpr "flag"} boogie_si_record_i8(0);
  $M.0 := $store.i32($M.0, m, 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(m, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(m, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(m, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(m, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(m, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
  $M.0 := $store.i32($M.0, top, 0);
  call {:cexpr "top"} boogie_si_record_i32(0);
  $M.0 := $store.i32($M.0, arr, 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(1, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(2, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(3, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(4, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(5, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(6, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(7, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(8, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(9, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(10, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(11, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(12, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(13, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(14, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(15, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(16, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(17, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(18, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(19, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(20, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(21, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(22, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(23, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(24, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(25, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(26, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(27, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(28, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(29, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(30, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(31, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(32, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(33, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(34, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(35, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(36, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(37, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(38, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(39, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(40, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(41, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(42, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(43, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(44, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(45, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(46, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(47, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(48, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(49, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(50, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(51, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(52, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(53, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(54, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(55, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(56, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(57, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(58, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(59, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(60, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(61, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(62, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(63, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(64, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(65, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(66, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(67, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(68, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(69, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(70, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(71, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(72, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(73, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(74, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(75, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(76, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(77, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(78, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(79, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(80, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(81, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(82, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(83, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(84, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(85, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(86, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(87, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(88, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(89, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(90, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(91, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(92, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(93, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(94, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(95, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(96, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(97, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(98, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(99, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(100, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(101, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(102, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(103, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(104, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(105, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(106, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(107, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(108, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(109, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(110, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(111, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(112, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(113, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(114, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(115, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(116, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(117, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(118, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(119, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(120, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(121, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(122, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(123, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(124, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(125, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(126, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(127, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(128, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(129, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(130, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(131, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(132, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(133, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(134, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(135, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(136, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(137, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(138, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(139, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(140, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(141, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(142, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(143, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(144, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(145, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(146, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(147, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(148, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(149, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(150, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(151, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(152, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(153, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(154, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(155, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(156, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(157, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(158, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(159, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(160, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(161, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(162, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(163, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(164, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(165, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(166, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(167, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(168, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(169, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(170, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(171, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(172, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(173, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(174, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(175, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(176, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(177, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(178, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(179, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(180, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(181, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(182, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(183, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(184, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(185, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(186, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(187, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(188, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(189, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(190, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(191, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(192, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(193, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(194, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(195, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(196, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(197, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(198, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(199, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(200, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(201, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(202, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(203, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(204, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(205, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(206, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(207, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(208, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(209, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(210, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(211, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(212, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(213, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(214, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(215, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(216, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(217, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(218, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(219, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(220, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(221, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(222, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(223, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(224, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(225, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(226, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(227, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(228, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(229, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(230, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(231, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(232, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(233, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(234, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(235, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(236, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(237, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(238, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(239, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(240, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(241, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(242, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(243, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(244, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(245, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(246, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(247, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(248, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(249, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(250, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(251, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(252, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(253, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(254, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(255, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(256, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(257, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(258, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(259, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(260, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(261, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(262, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(263, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(264, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(265, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(266, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(267, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(268, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(269, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(270, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(271, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(272, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(273, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(274, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(275, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(276, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(277, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(278, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(279, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(280, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(281, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(282, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(283, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(284, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(285, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(286, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(287, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(288, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(289, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(290, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(291, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(292, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(293, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(294, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(295, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(296, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(297, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(298, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(299, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(300, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(301, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(302, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(303, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(304, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(305, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(306, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(307, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(308, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(309, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(310, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(311, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(312, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(313, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(314, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(315, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(316, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(317, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(318, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(319, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(320, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(321, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(322, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(323, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(324, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(325, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(326, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(327, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(328, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(329, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(330, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(331, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(332, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(333, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(334, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(335, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(336, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(337, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(338, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(339, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(340, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(341, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(342, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(343, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(344, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(345, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(346, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(347, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(348, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(349, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(350, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(351, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(352, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(353, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(354, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(355, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(356, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(357, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(358, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(359, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(360, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(361, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(362, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(363, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(364, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(365, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(366, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(367, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(368, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(369, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(370, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(371, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(372, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(373, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(374, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(375, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(376, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(377, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(378, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(379, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(380, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(381, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(382, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(383, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(384, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(385, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(386, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(387, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(388, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(389, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(390, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(391, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(392, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(393, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(394, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(395, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(396, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(397, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(398, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(399, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(400, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(401, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(402, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(403, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(404, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(405, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(406, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(407, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(408, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(409, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(410, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(411, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(412, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(413, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(414, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(415, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(416, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(417, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(418, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(419, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(420, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(421, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(422, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(423, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(424, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(425, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(426, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(427, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(428, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(429, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(430, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(431, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(432, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(433, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(434, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(435, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(436, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(437, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(438, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(439, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(440, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(441, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(442, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(443, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(444, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(445, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(446, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(447, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(448, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(449, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(450, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(451, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(452, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(453, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(454, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(455, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(456, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(457, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(458, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(459, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(460, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(461, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(462, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(463, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(464, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(465, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(466, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(467, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(468, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(469, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(470, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(471, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(472, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(473, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(474, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(475, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(476, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(477, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(478, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(479, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(480, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(481, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(482, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(483, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(484, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(485, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(486, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(487, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(488, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(489, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(490, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(491, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(492, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(493, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(494, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(495, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(496, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(497, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(498, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(499, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(500, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(501, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(502, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(503, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(504, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(505, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(506, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(507, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(508, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(509, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(510, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(511, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(512, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(513, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(514, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(515, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(516, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(517, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(518, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(519, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(520, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(521, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(522, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(523, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(524, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(525, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(526, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(527, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(528, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(529, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(530, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(531, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(532, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(533, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(534, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(535, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(536, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(537, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(538, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(539, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(540, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(541, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(542, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(543, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(544, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(545, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(546, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(547, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(548, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(549, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(550, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(551, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(552, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(553, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(554, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(555, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(556, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(557, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(558, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(559, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(560, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(561, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(562, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(563, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(564, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(565, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(566, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(567, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(568, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(569, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(570, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(571, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(572, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(573, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(574, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(575, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(576, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(577, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(578, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(579, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(580, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(581, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(582, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(583, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(584, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(585, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(586, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(587, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(588, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(589, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(590, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(591, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(592, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(593, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(594, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(595, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(596, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(597, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(598, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(599, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(600, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(601, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(602, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(603, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(604, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(605, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(606, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(607, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(608, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(609, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(610, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(611, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(612, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(613, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(614, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(615, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(616, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(617, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(618, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(619, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(620, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(621, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(622, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(623, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(624, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(625, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(626, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(627, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(628, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(629, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(630, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(631, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(632, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(633, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(634, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(635, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(636, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(637, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(638, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(639, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(640, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(641, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(642, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(643, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(644, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(645, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(646, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(647, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(648, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(649, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(650, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(651, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(652, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(653, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(654, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(655, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(656, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(657, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(658, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(659, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(660, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(661, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(662, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(663, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(664, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(665, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(666, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(667, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(668, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(669, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(670, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(671, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(672, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(673, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(674, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(675, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(676, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(677, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(678, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(679, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(680, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(681, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(682, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(683, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(684, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(685, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(686, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(687, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(688, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(689, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(690, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(691, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(692, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(693, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(694, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(695, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(696, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(697, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(698, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(699, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(700, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(701, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(702, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(703, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(704, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(705, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(706, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(707, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(708, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(709, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(710, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(711, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(712, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(713, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(714, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(715, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(716, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(717, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(718, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(719, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(720, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(721, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(722, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(723, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(724, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(725, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(726, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(727, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(728, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(729, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(730, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(731, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(732, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(733, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(734, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(735, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(736, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(737, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(738, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(739, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(740, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(741, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(742, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(743, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(744, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(745, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(746, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(747, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(748, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(749, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(750, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(751, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(752, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(753, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(754, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(755, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(756, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(757, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(758, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(759, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(760, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(761, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(762, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(763, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(764, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(765, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(766, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(767, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(768, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(769, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(770, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(771, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(772, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(773, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(774, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(775, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(776, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(777, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(778, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(779, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(780, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(781, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(782, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(783, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(784, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(785, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(786, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(787, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(788, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(789, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(790, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(791, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(792, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(793, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(794, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(795, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(796, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(797, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(798, 4)), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(arr, $mul.ref(0, 3200)), $mul.ref(799, 4)), 0);
  $M.0 := $store.ref($M.0, env_value_str, .str.1.7);
  $M.0 := $store.i32($M.0, errno_global, 0);
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
