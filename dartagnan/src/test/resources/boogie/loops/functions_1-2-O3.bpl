// generated by SMACK version 2.4.1 for corral
// via /usr/local/bin/smack -q -t --no-memory-splitting --bit-precise --clang-options=-DCUSTOM_VERIFIER_ASSERT -O3 -fno-vectorize -fno-slp-vectorize -I./include/ -bpl ./output/functions_1-2-O3.bpl /Users/ponce/git/Dat3M/./output/functions_1-2_tmp.c

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $1: bv32;
axiom ($1 == 1bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (1 regions)
var $M.0: [ref] bv8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 44379));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { (if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i)) }

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv5(i: bv5) returns (bv5);
function {:bvbuiltin "bvnot"} $not.bv6(i: bv6) returns (bv6);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv80(i: bv80) returns (bv80);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv160(i: bv160) returns (bv160);
function {:bvbuiltin "bvnot"} $not.bv256(i: bv256) returns (bv256);
function {:inline} $smin.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $slt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $slt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $slt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $slt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $slt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $slt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $slt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $slt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $slt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $slt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $slt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $slt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $slt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $slt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $slt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $slt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $slt.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sgt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $sgt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $sgt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $sgt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $sgt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $sgt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $sgt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $sgt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $sgt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $sgt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $sgt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $sgt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $sgt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $sgt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $sgt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $sgt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $sgt.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ult.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $ult.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $ult.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $ult.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $ult.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $ult.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $ult.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $ult.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $ult.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $ult.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $ult.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $ult.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $ult.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $ult.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $ult.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $ult.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $ult.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ugt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $ugt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $ugt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $ugt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $ugt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $ugt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $ugt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $ugt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $ugt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $ugt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $ugt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $ugt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $ugt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $ugt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $ugt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $ugt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $ugt.bv256.bool(i1, i2) then i1 else i2) }
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ule.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ule.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ule.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ule.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ule.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ult.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ult.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ult.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ult.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ult.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $uge.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $uge.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $uge.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $uge.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $uge.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ugt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ugt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ugt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ugt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ugt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sle.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sle.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sle.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sle.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sle.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $slt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $slt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $slt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $slt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $slt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sge.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sge.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sge.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sge.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sge.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sgt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sgt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sgt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sgt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sgt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
// Integer load/store operations
function {:inline} $load.bv1(M: [ref] bv1, p: ref) returns (bv1) { M[p] }
function {:inline} $store.bv1(M: [ref] bv1, p: ref, i: bv1) returns ([ref] bv1) { M[p := i] }
function {:inline} $load.bytes.bv1(M: [ref] bv8, p: ref) returns (bv1) { $trunc.bv8.bv1(M[p]) }
function {:inline} $store.bytes.bv1(M: [ref] bv8, p: ref, i: bv1) returns ([ref] bv8) { M[p := $zext.bv1.bv8(i)] }
function {:inline} $load.bv5(M: [ref] bv5, p: ref) returns (bv5) { M[p] }
function {:inline} $store.bv5(M: [ref] bv5, p: ref, i: bv5) returns ([ref] bv5) { M[p := i] }
function {:inline} $load.bytes.bv5(M: [ref] bv8, p: ref) returns (bv5) { $trunc.bv8.bv5(M[p]) }
function {:inline} $store.bytes.bv5(M: [ref] bv8, p: ref, i: bv5) returns ([ref] bv8) { M[p := $zext.bv5.bv8(i)] }
function {:inline} $load.bv6(M: [ref] bv6, p: ref) returns (bv6) { M[p] }
function {:inline} $store.bv6(M: [ref] bv6, p: ref, i: bv6) returns ([ref] bv6) { M[p := i] }
function {:inline} $load.bytes.bv6(M: [ref] bv8, p: ref) returns (bv6) { $trunc.bv8.bv6(M[p]) }
function {:inline} $store.bytes.bv6(M: [ref] bv8, p: ref, i: bv6) returns ([ref] bv8) { M[p := $zext.bv6.bv8(i)] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, i: bv8) returns ([ref] bv8) { M[p := i] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.bytes.bv8(M: [ref] bv8, p: ref, i: bv8) returns ([ref] bv8) { M[p := i] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, i: bv16) returns ([ref] bv16) { M[p := i] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16) { (M[$add.ref(p, 1)]++M[p]) }
function {:inline} $store.bytes.bv16(M: [ref] bv8, p: ref, i: bv16) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, i: bv24) returns ([ref] bv24) { M[p := i] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24) { (M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])) }
function {:inline} $store.bytes.bv24(M: [ref] bv8, p: ref, i: bv24) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, i: bv32) returns ([ref] bv32) { M[p := i] }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32) { (M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))) }
function {:inline} $store.bytes.bv32(M: [ref] bv8, p: ref, i: bv32) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, i: bv40) returns ([ref] bv40) { M[p := i] }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40) { (M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))) }
function {:inline} $store.bytes.bv40(M: [ref] bv8, p: ref, i: bv40) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, i: bv48) returns ([ref] bv48) { M[p := i] }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48) { (M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))) }
function {:inline} $store.bytes.bv48(M: [ref] bv8, p: ref, i: bv48) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, i: bv56) returns ([ref] bv56) { M[p := i] }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56) { (M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))))) }
function {:inline} $store.bytes.bv56(M: [ref] bv8, p: ref, i: bv56) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, i: bv64) returns ([ref] bv64) { M[p := i] }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64) { (M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))) }
function {:inline} $store.bytes.bv64(M: [ref] bv8, p: ref, i: bv64) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]] }
function {:inline} $load.bv80(M: [ref] bv80, p: ref) returns (bv80) { M[p] }
function {:inline} $store.bv80(M: [ref] bv80, p: ref, i: bv80) returns ([ref] bv80) { M[p := i] }
function {:inline} $load.bytes.bv80(M: [ref] bv8, p: ref) returns (bv80) { (M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))) }
function {:inline} $store.bytes.bv80(M: [ref] bv8, p: ref, i: bv80) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, i: bv88) returns ([ref] bv88) { M[p := i] }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88) { (M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))))))))) }
function {:inline} $store.bytes.bv88(M: [ref] bv8, p: ref, i: bv88) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, i: bv96) returns ([ref] bv96) { M[p := i] }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96) { (M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))) }
function {:inline} $store.bytes.bv96(M: [ref] bv8, p: ref, i: bv96) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, i: bv128) returns ([ref] bv128) { M[p := i] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128) { (M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))) }
function {:inline} $store.bytes.bv128(M: [ref] bv8, p: ref, i: bv128) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]] }
function {:inline} $load.bv160(M: [ref] bv160, p: ref) returns (bv160) { M[p] }
function {:inline} $store.bv160(M: [ref] bv160, p: ref, i: bv160) returns ([ref] bv160) { M[p := i] }
function {:inline} $load.bytes.bv160(M: [ref] bv8, p: ref) returns (bv160) { (M[$add.ref(p, 19)]++(M[$add.ref(p, 18)]++(M[$add.ref(p, 17)]++(M[$add.ref(p, 16)]++(M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))))))) }
function {:inline} $store.bytes.bv160(M: [ref] bv8, p: ref, i: bv160) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]][$add.ref(p, 16) := i[136:128]][$add.ref(p, 17) := i[144:136]][$add.ref(p, 18) := i[152:144]][$add.ref(p, 19) := i[160:152]] }
function {:inline} $load.bv256(M: [ref] bv256, p: ref) returns (bv256) { M[p] }
function {:inline} $store.bv256(M: [ref] bv256, p: ref, i: bv256) returns ([ref] bv256) { M[p := i] }
function {:inline} $load.bytes.bv256(M: [ref] bv8, p: ref) returns (bv256) { (M[$add.ref(p, 31)]++(M[$add.ref(p, 30)]++(M[$add.ref(p, 29)]++(M[$add.ref(p, 28)]++(M[$add.ref(p, 27)]++(M[$add.ref(p, 26)]++(M[$add.ref(p, 25)]++(M[$add.ref(p, 24)]++(M[$add.ref(p, 23)]++(M[$add.ref(p, 22)]++(M[$add.ref(p, 21)]++(M[$add.ref(p, 20)]++(M[$add.ref(p, 19)]++(M[$add.ref(p, 18)]++(M[$add.ref(p, 17)]++(M[$add.ref(p, 16)]++(M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))))))))))))))))))) }
function {:inline} $store.bytes.bv256(M: [ref] bv8, p: ref, i: bv256) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]][$add.ref(p, 16) := i[136:128]][$add.ref(p, 17) := i[144:136]][$add.ref(p, 18) := i[152:144]][$add.ref(p, 19) := i[160:152]][$add.ref(p, 20) := i[168:160]][$add.ref(p, 21) := i[176:168]][$add.ref(p, 22) := i[184:176]][$add.ref(p, 23) := i[192:184]][$add.ref(p, 24) := i[200:192]][$add.ref(p, 25) := i[208:200]][$add.ref(p, 26) := i[216:208]][$add.ref(p, 27) := i[224:216]][$add.ref(p, 28) := i[232:224]][$add.ref(p, 29) := i[240:232]][$add.ref(p, 30) := i[248:240]][$add.ref(p, 31) := i[256:248]] }
// Conversion between integer types
function {:inline} $trunc.bv5.bv1(i: bv5) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv6.bv1(i: bv6) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv80.bv1(i: bv80) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv160.bv1(i: bv160) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv256.bv1(i: bv256) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv6.bv5(i: bv6) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv8.bv5(i: bv8) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv16.bv5(i: bv16) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv24.bv5(i: bv24) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv32.bv5(i: bv32) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv40.bv5(i: bv40) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv48.bv5(i: bv48) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv56.bv5(i: bv56) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv64.bv5(i: bv64) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv80.bv5(i: bv80) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv88.bv5(i: bv88) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv96.bv5(i: bv96) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv128.bv5(i: bv128) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv160.bv5(i: bv160) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv256.bv5(i: bv256) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv8.bv6(i: bv8) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv16.bv6(i: bv16) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv24.bv6(i: bv24) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv32.bv6(i: bv32) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv40.bv6(i: bv40) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv48.bv6(i: bv48) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv56.bv6(i: bv56) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv64.bv6(i: bv64) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv80.bv6(i: bv80) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv88.bv6(i: bv88) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv96.bv6(i: bv96) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv128.bv6(i: bv128) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv160.bv6(i: bv160) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv256.bv6(i: bv256) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv80.bv8(i: bv80) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv160.bv8(i: bv160) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv256.bv8(i: bv256) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv80.bv16(i: bv80) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv160.bv16(i: bv160) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv256.bv16(i: bv256) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv80.bv24(i: bv80) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv160.bv24(i: bv160) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv256.bv24(i: bv256) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv80.bv32(i: bv80) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv160.bv32(i: bv160) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv256.bv32(i: bv256) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv48.bv40(i: bv48) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv80.bv40(i: bv80) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv160.bv40(i: bv160) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv256.bv40(i: bv256) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv80.bv48(i: bv80) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv160.bv48(i: bv160) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv256.bv48(i: bv256) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv80.bv56(i: bv80) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv160.bv56(i: bv160) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv256.bv56(i: bv256) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv80.bv64(i: bv80) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv160.bv64(i: bv160) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv256.bv64(i: bv256) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv88.bv80(i: bv88) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv96.bv80(i: bv96) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv128.bv80(i: bv128) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv160.bv80(i: bv160) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv256.bv80(i: bv256) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv160.bv88(i: bv160) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv256.bv88(i: bv256) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv160.bv96(i: bv160) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv256.bv96(i: bv256) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv160.bv128(i: bv160) returns (bv128) { i[128:0] }
function {:inline} $trunc.bv256.bv128(i: bv256) returns (bv128) { i[128:0] }
function {:inline} $trunc.bv256.bv160(i: bv256) returns (bv160) { i[160:0] }
function {:bvbuiltin "(_ sign_extend 4)"} $sext.bv1.bv5(i: bv1) returns (bv5);
function {:bvbuiltin "(_ sign_extend 5)"} $sext.bv1.bv6(i: bv1) returns (bv6);
function {:bvbuiltin "(_ sign_extend 7)"} $sext.bv1.bv8(i: bv1) returns (bv8);
function {:bvbuiltin "(_ sign_extend 15)"} $sext.bv1.bv16(i: bv1) returns (bv16);
function {:bvbuiltin "(_ sign_extend 23)"} $sext.bv1.bv24(i: bv1) returns (bv24);
function {:bvbuiltin "(_ sign_extend 31)"} $sext.bv1.bv32(i: bv1) returns (bv32);
function {:bvbuiltin "(_ sign_extend 39)"} $sext.bv1.bv40(i: bv1) returns (bv40);
function {:bvbuiltin "(_ sign_extend 47)"} $sext.bv1.bv48(i: bv1) returns (bv48);
function {:bvbuiltin "(_ sign_extend 55)"} $sext.bv1.bv56(i: bv1) returns (bv56);
function {:bvbuiltin "(_ sign_extend 63)"} $sext.bv1.bv64(i: bv1) returns (bv64);
function {:bvbuiltin "(_ sign_extend 79)"} $sext.bv1.bv80(i: bv1) returns (bv80);
function {:bvbuiltin "(_ sign_extend 87)"} $sext.bv1.bv88(i: bv1) returns (bv88);
function {:bvbuiltin "(_ sign_extend 95)"} $sext.bv1.bv96(i: bv1) returns (bv96);
function {:bvbuiltin "(_ sign_extend 127)"} $sext.bv1.bv128(i: bv1) returns (bv128);
function {:bvbuiltin "(_ sign_extend 159)"} $sext.bv1.bv160(i: bv1) returns (bv160);
function {:bvbuiltin "(_ sign_extend 255)"} $sext.bv1.bv256(i: bv1) returns (bv256);
function {:bvbuiltin "(_ sign_extend 1)"} $sext.bv5.bv6(i: bv5) returns (bv6);
function {:bvbuiltin "(_ sign_extend 3)"} $sext.bv5.bv8(i: bv5) returns (bv8);
function {:bvbuiltin "(_ sign_extend 11)"} $sext.bv5.bv16(i: bv5) returns (bv16);
function {:bvbuiltin "(_ sign_extend 19)"} $sext.bv5.bv24(i: bv5) returns (bv24);
function {:bvbuiltin "(_ sign_extend 27)"} $sext.bv5.bv32(i: bv5) returns (bv32);
function {:bvbuiltin "(_ sign_extend 35)"} $sext.bv5.bv40(i: bv5) returns (bv40);
function {:bvbuiltin "(_ sign_extend 43)"} $sext.bv5.bv48(i: bv5) returns (bv48);
function {:bvbuiltin "(_ sign_extend 51)"} $sext.bv5.bv56(i: bv5) returns (bv56);
function {:bvbuiltin "(_ sign_extend 59)"} $sext.bv5.bv64(i: bv5) returns (bv64);
function {:bvbuiltin "(_ sign_extend 75)"} $sext.bv5.bv80(i: bv5) returns (bv80);
function {:bvbuiltin "(_ sign_extend 83)"} $sext.bv5.bv88(i: bv5) returns (bv88);
function {:bvbuiltin "(_ sign_extend 91)"} $sext.bv5.bv96(i: bv5) returns (bv96);
function {:bvbuiltin "(_ sign_extend 123)"} $sext.bv5.bv128(i: bv5) returns (bv128);
function {:bvbuiltin "(_ sign_extend 155)"} $sext.bv5.bv160(i: bv5) returns (bv160);
function {:bvbuiltin "(_ sign_extend 251)"} $sext.bv5.bv256(i: bv5) returns (bv256);
function {:bvbuiltin "(_ sign_extend 2)"} $sext.bv6.bv8(i: bv6) returns (bv8);
function {:bvbuiltin "(_ sign_extend 10)"} $sext.bv6.bv16(i: bv6) returns (bv16);
function {:bvbuiltin "(_ sign_extend 18)"} $sext.bv6.bv24(i: bv6) returns (bv24);
function {:bvbuiltin "(_ sign_extend 26)"} $sext.bv6.bv32(i: bv6) returns (bv32);
function {:bvbuiltin "(_ sign_extend 34)"} $sext.bv6.bv40(i: bv6) returns (bv40);
function {:bvbuiltin "(_ sign_extend 42)"} $sext.bv6.bv48(i: bv6) returns (bv48);
function {:bvbuiltin "(_ sign_extend 50)"} $sext.bv6.bv56(i: bv6) returns (bv56);
function {:bvbuiltin "(_ sign_extend 58)"} $sext.bv6.bv64(i: bv6) returns (bv64);
function {:bvbuiltin "(_ sign_extend 74)"} $sext.bv6.bv80(i: bv6) returns (bv80);
function {:bvbuiltin "(_ sign_extend 82)"} $sext.bv6.bv88(i: bv6) returns (bv88);
function {:bvbuiltin "(_ sign_extend 90)"} $sext.bv6.bv96(i: bv6) returns (bv96);
function {:bvbuiltin "(_ sign_extend 122)"} $sext.bv6.bv128(i: bv6) returns (bv128);
function {:bvbuiltin "(_ sign_extend 154)"} $sext.bv6.bv160(i: bv6) returns (bv160);
function {:bvbuiltin "(_ sign_extend 250)"} $sext.bv6.bv256(i: bv6) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 152)"} $sext.bv8.bv160(i: bv8) returns (bv160);
function {:bvbuiltin "(_ sign_extend 248)"} $sext.bv8.bv256(i: bv8) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 144)"} $sext.bv16.bv160(i: bv16) returns (bv160);
function {:bvbuiltin "(_ sign_extend 240)"} $sext.bv16.bv256(i: bv16) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 136)"} $sext.bv24.bv160(i: bv24) returns (bv160);
function {:bvbuiltin "(_ sign_extend 232)"} $sext.bv24.bv256(i: bv24) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 128)"} $sext.bv32.bv160(i: bv32) returns (bv160);
function {:bvbuiltin "(_ sign_extend 224)"} $sext.bv32.bv256(i: bv32) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv40.bv160(i: bv40) returns (bv160);
function {:bvbuiltin "(_ sign_extend 216)"} $sext.bv40.bv256(i: bv40) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv48.bv160(i: bv48) returns (bv160);
function {:bvbuiltin "(_ sign_extend 208)"} $sext.bv48.bv256(i: bv48) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv56.bv160(i: bv56) returns (bv160);
function {:bvbuiltin "(_ sign_extend 200)"} $sext.bv56.bv256(i: bv56) returns (bv256);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv64.bv160(i: bv64) returns (bv160);
function {:bvbuiltin "(_ sign_extend 192)"} $sext.bv64.bv256(i: bv64) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv80.bv160(i: bv80) returns (bv160);
function {:bvbuiltin "(_ sign_extend 176)"} $sext.bv80.bv256(i: bv80) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv88.bv160(i: bv88) returns (bv160);
function {:bvbuiltin "(_ sign_extend 168)"} $sext.bv88.bv256(i: bv88) returns (bv256);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv96.bv160(i: bv96) returns (bv160);
function {:bvbuiltin "(_ sign_extend 160)"} $sext.bv96.bv256(i: bv96) returns (bv256);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv128.bv160(i: bv128) returns (bv160);
function {:bvbuiltin "(_ sign_extend 128)"} $sext.bv128.bv256(i: bv128) returns (bv256);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv160.bv256(i: bv160) returns (bv256);
function {:bvbuiltin "(_ zero_extend 4)"} $zext.bv1.bv5(i: bv1) returns (bv5);
function {:bvbuiltin "(_ zero_extend 5)"} $zext.bv1.bv6(i: bv1) returns (bv6);
function {:bvbuiltin "(_ zero_extend 7)"} $zext.bv1.bv8(i: bv1) returns (bv8);
function {:bvbuiltin "(_ zero_extend 15)"} $zext.bv1.bv16(i: bv1) returns (bv16);
function {:bvbuiltin "(_ zero_extend 23)"} $zext.bv1.bv24(i: bv1) returns (bv24);
function {:bvbuiltin "(_ zero_extend 31)"} $zext.bv1.bv32(i: bv1) returns (bv32);
function {:bvbuiltin "(_ zero_extend 39)"} $zext.bv1.bv40(i: bv1) returns (bv40);
function {:bvbuiltin "(_ zero_extend 47)"} $zext.bv1.bv48(i: bv1) returns (bv48);
function {:bvbuiltin "(_ zero_extend 55)"} $zext.bv1.bv56(i: bv1) returns (bv56);
function {:bvbuiltin "(_ zero_extend 63)"} $zext.bv1.bv64(i: bv1) returns (bv64);
function {:bvbuiltin "(_ zero_extend 79)"} $zext.bv1.bv80(i: bv1) returns (bv80);
function {:bvbuiltin "(_ zero_extend 87)"} $zext.bv1.bv88(i: bv1) returns (bv88);
function {:bvbuiltin "(_ zero_extend 95)"} $zext.bv1.bv96(i: bv1) returns (bv96);
function {:bvbuiltin "(_ zero_extend 127)"} $zext.bv1.bv128(i: bv1) returns (bv128);
function {:bvbuiltin "(_ zero_extend 159)"} $zext.bv1.bv160(i: bv1) returns (bv160);
function {:bvbuiltin "(_ zero_extend 255)"} $zext.bv1.bv256(i: bv1) returns (bv256);
function {:bvbuiltin "(_ zero_extend 1)"} $zext.bv5.bv6(i: bv5) returns (bv6);
function {:bvbuiltin "(_ zero_extend 3)"} $zext.bv5.bv8(i: bv5) returns (bv8);
function {:bvbuiltin "(_ zero_extend 11)"} $zext.bv5.bv16(i: bv5) returns (bv16);
function {:bvbuiltin "(_ zero_extend 19)"} $zext.bv5.bv24(i: bv5) returns (bv24);
function {:bvbuiltin "(_ zero_extend 27)"} $zext.bv5.bv32(i: bv5) returns (bv32);
function {:bvbuiltin "(_ zero_extend 35)"} $zext.bv5.bv40(i: bv5) returns (bv40);
function {:bvbuiltin "(_ zero_extend 43)"} $zext.bv5.bv48(i: bv5) returns (bv48);
function {:bvbuiltin "(_ zero_extend 51)"} $zext.bv5.bv56(i: bv5) returns (bv56);
function {:bvbuiltin "(_ zero_extend 59)"} $zext.bv5.bv64(i: bv5) returns (bv64);
function {:bvbuiltin "(_ zero_extend 75)"} $zext.bv5.bv80(i: bv5) returns (bv80);
function {:bvbuiltin "(_ zero_extend 83)"} $zext.bv5.bv88(i: bv5) returns (bv88);
function {:bvbuiltin "(_ zero_extend 91)"} $zext.bv5.bv96(i: bv5) returns (bv96);
function {:bvbuiltin "(_ zero_extend 123)"} $zext.bv5.bv128(i: bv5) returns (bv128);
function {:bvbuiltin "(_ zero_extend 155)"} $zext.bv5.bv160(i: bv5) returns (bv160);
function {:bvbuiltin "(_ zero_extend 251)"} $zext.bv5.bv256(i: bv5) returns (bv256);
function {:bvbuiltin "(_ zero_extend 2)"} $zext.bv6.bv8(i: bv6) returns (bv8);
function {:bvbuiltin "(_ zero_extend 10)"} $zext.bv6.bv16(i: bv6) returns (bv16);
function {:bvbuiltin "(_ zero_extend 18)"} $zext.bv6.bv24(i: bv6) returns (bv24);
function {:bvbuiltin "(_ zero_extend 26)"} $zext.bv6.bv32(i: bv6) returns (bv32);
function {:bvbuiltin "(_ zero_extend 34)"} $zext.bv6.bv40(i: bv6) returns (bv40);
function {:bvbuiltin "(_ zero_extend 42)"} $zext.bv6.bv48(i: bv6) returns (bv48);
function {:bvbuiltin "(_ zero_extend 50)"} $zext.bv6.bv56(i: bv6) returns (bv56);
function {:bvbuiltin "(_ zero_extend 58)"} $zext.bv6.bv64(i: bv6) returns (bv64);
function {:bvbuiltin "(_ zero_extend 74)"} $zext.bv6.bv80(i: bv6) returns (bv80);
function {:bvbuiltin "(_ zero_extend 82)"} $zext.bv6.bv88(i: bv6) returns (bv88);
function {:bvbuiltin "(_ zero_extend 90)"} $zext.bv6.bv96(i: bv6) returns (bv96);
function {:bvbuiltin "(_ zero_extend 122)"} $zext.bv6.bv128(i: bv6) returns (bv128);
function {:bvbuiltin "(_ zero_extend 154)"} $zext.bv6.bv160(i: bv6) returns (bv160);
function {:bvbuiltin "(_ zero_extend 250)"} $zext.bv6.bv256(i: bv6) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 152)"} $zext.bv8.bv160(i: bv8) returns (bv160);
function {:bvbuiltin "(_ zero_extend 248)"} $zext.bv8.bv256(i: bv8) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 144)"} $zext.bv16.bv160(i: bv16) returns (bv160);
function {:bvbuiltin "(_ zero_extend 240)"} $zext.bv16.bv256(i: bv16) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 136)"} $zext.bv24.bv160(i: bv24) returns (bv160);
function {:bvbuiltin "(_ zero_extend 232)"} $zext.bv24.bv256(i: bv24) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 128)"} $zext.bv32.bv160(i: bv32) returns (bv160);
function {:bvbuiltin "(_ zero_extend 224)"} $zext.bv32.bv256(i: bv32) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv40.bv160(i: bv40) returns (bv160);
function {:bvbuiltin "(_ zero_extend 216)"} $zext.bv40.bv256(i: bv40) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv48.bv160(i: bv48) returns (bv160);
function {:bvbuiltin "(_ zero_extend 208)"} $zext.bv48.bv256(i: bv48) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv56.bv160(i: bv56) returns (bv160);
function {:bvbuiltin "(_ zero_extend 200)"} $zext.bv56.bv256(i: bv56) returns (bv256);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv64.bv160(i: bv64) returns (bv160);
function {:bvbuiltin "(_ zero_extend 192)"} $zext.bv64.bv256(i: bv64) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv80.bv160(i: bv80) returns (bv160);
function {:bvbuiltin "(_ zero_extend 176)"} $zext.bv80.bv256(i: bv80) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv88.bv160(i: bv88) returns (bv160);
function {:bvbuiltin "(_ zero_extend 168)"} $zext.bv88.bv256(i: bv88) returns (bv256);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv96.bv160(i: bv96) returns (bv160);
function {:bvbuiltin "(_ zero_extend 160)"} $zext.bv96.bv256(i: bv96) returns (bv256);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv128.bv160(i: bv128) returns (bv160);
function {:bvbuiltin "(_ zero_extend 128)"} $zext.bv128.bv256(i: bv128) returns (bv256);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv160.bv256(i: bv160) returns (bv256);
function $extractvalue.bv1(p: ref, i: int) returns (bv1);
function $extractvalue.bv5(p: ref, i: int) returns (bv5);
function $extractvalue.bv6(p: ref, i: int) returns (bv6);
function $extractvalue.bv8(p: ref, i: int) returns (bv8);
function $extractvalue.bv16(p: ref, i: int) returns (bv16);
function $extractvalue.bv24(p: ref, i: int) returns (bv24);
function $extractvalue.bv32(p: ref, i: int) returns (bv32);
function $extractvalue.bv40(p: ref, i: int) returns (bv40);
function $extractvalue.bv48(p: ref, i: int) returns (bv48);
function $extractvalue.bv56(p: ref, i: int) returns (bv56);
function $extractvalue.bv64(p: ref, i: int) returns (bv64);
function $extractvalue.bv80(p: ref, i: int) returns (bv80);
function $extractvalue.bv88(p: ref, i: int) returns (bv88);
function $extractvalue.bv96(p: ref, i: int) returns (bv96);
function $extractvalue.bv128(p: ref, i: int) returns (bv128);
function $extractvalue.bv160(p: ref, i: int) returns (bv160);
function $extractvalue.bv256(p: ref, i: int) returns (bv256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { (if $eq.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { (if $ne.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { (if $ugt.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { (if $uge.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { (if $ult.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { (if $ule.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { (if $sgt.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { (if $sge.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { (if $slt.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { (if $sle.i64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, p1: ref) returns ([ref] bv8) { $store.bytes.bv64(M, p, $p2i.ref.bv64(p1)) }
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.bv8(f: float) returns (bv8);
function $bitcast.float.bv16(f: float) returns (bv16);
function $bitcast.float.bv32(f: float) returns (bv32);
function $bitcast.float.bv64(f: float) returns (bv64);
function $bitcast.float.bv80(f: float) returns (bv80);
function $bitcast.bv8.float(i: bv8) returns (float);
function $bitcast.bv16.float(i: bv16) returns (float);
function $bitcast.bv32.float(i: bv32) returns (float);
function $bitcast.bv64.float(i: bv64) returns (float);
function $bitcast.bv80.float(i: bv80) returns (float);
function $fp2si.float.bv1(f: float) returns (bv1);
function $fp2si.float.bv5(f: float) returns (bv5);
function $fp2si.float.bv6(f: float) returns (bv6);
function $fp2si.float.bv8(f: float) returns (bv8);
function $fp2si.float.bv16(f: float) returns (bv16);
function $fp2si.float.bv24(f: float) returns (bv24);
function $fp2si.float.bv32(f: float) returns (bv32);
function $fp2si.float.bv40(f: float) returns (bv40);
function $fp2si.float.bv48(f: float) returns (bv48);
function $fp2si.float.bv56(f: float) returns (bv56);
function $fp2si.float.bv64(f: float) returns (bv64);
function $fp2si.float.bv80(f: float) returns (bv80);
function $fp2si.float.bv88(f: float) returns (bv88);
function $fp2si.float.bv96(f: float) returns (bv96);
function $fp2si.float.bv128(f: float) returns (bv128);
function $fp2si.float.bv160(f: float) returns (bv160);
function $fp2si.float.bv256(f: float) returns (bv256);
function $fp2ui.float.bv1(f: float) returns (bv1);
function $fp2ui.float.bv5(f: float) returns (bv5);
function $fp2ui.float.bv6(f: float) returns (bv6);
function $fp2ui.float.bv8(f: float) returns (bv8);
function $fp2ui.float.bv16(f: float) returns (bv16);
function $fp2ui.float.bv24(f: float) returns (bv24);
function $fp2ui.float.bv32(f: float) returns (bv32);
function $fp2ui.float.bv40(f: float) returns (bv40);
function $fp2ui.float.bv48(f: float) returns (bv48);
function $fp2ui.float.bv56(f: float) returns (bv56);
function $fp2ui.float.bv64(f: float) returns (bv64);
function $fp2ui.float.bv80(f: float) returns (bv80);
function $fp2ui.float.bv88(f: float) returns (bv88);
function $fp2ui.float.bv96(f: float) returns (bv96);
function $fp2ui.float.bv128(f: float) returns (bv128);
function $fp2ui.float.bv160(f: float) returns (bv160);
function $fp2ui.float.bv256(f: float) returns (bv256);
function $si2fp.bv1.float(i: bv1) returns (float);
function $si2fp.bv5.float(i: bv5) returns (float);
function $si2fp.bv6.float(i: bv6) returns (float);
function $si2fp.bv8.float(i: bv8) returns (float);
function $si2fp.bv16.float(i: bv16) returns (float);
function $si2fp.bv24.float(i: bv24) returns (float);
function $si2fp.bv32.float(i: bv32) returns (float);
function $si2fp.bv40.float(i: bv40) returns (float);
function $si2fp.bv48.float(i: bv48) returns (float);
function $si2fp.bv56.float(i: bv56) returns (float);
function $si2fp.bv64.float(i: bv64) returns (float);
function $si2fp.bv80.float(i: bv80) returns (float);
function $si2fp.bv88.float(i: bv88) returns (float);
function $si2fp.bv96.float(i: bv96) returns (float);
function $si2fp.bv128.float(i: bv128) returns (float);
function $si2fp.bv160.float(i: bv160) returns (float);
function $si2fp.bv256.float(i: bv256) returns (float);
function $ui2fp.bv1.float(i: bv1) returns (float);
function $ui2fp.bv5.float(i: bv5) returns (float);
function $ui2fp.bv6.float(i: bv6) returns (float);
function $ui2fp.bv8.float(i: bv8) returns (float);
function $ui2fp.bv16.float(i: bv16) returns (float);
function $ui2fp.bv24.float(i: bv24) returns (float);
function $ui2fp.bv32.float(i: bv32) returns (float);
function $ui2fp.bv40.float(i: bv40) returns (float);
function $ui2fp.bv48.float(i: bv48) returns (float);
function $ui2fp.bv56.float(i: bv56) returns (float);
function $ui2fp.bv64.float(i: bv64) returns (float);
function $ui2fp.bv80.float(i: bv80) returns (float);
function $ui2fp.bv88.float(i: bv88) returns (float);
function $ui2fp.bv96.float(i: bv96) returns (float);
function $ui2fp.bv128.float(i: bv128) returns (float);
function $ui2fp.bv160.float(i: bv160) returns (float);
function $ui2fp.bv256.float(i: bv256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.bytes.float(M: [ref] bv8, p: ref) returns (float) { $bitcast.bv8.float(M[p]) }
function {:inline} $store.bytes.float(M: [ref] bv8, p: ref, f: float) returns ([ref] bv8) { M[p := $bitcast.float.bv8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const {:count 14} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 1038));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 2070));
const {:count 3} .str.1.1: ref;
axiom (.str.1.1 == $sub.ref(0, 3097));
const {:count 14} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 4135));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 5163));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 6195));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "./output/functions_1-2_tmp.c", 2, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "./output/functions_1-2_tmp.c", 2, 44} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 7227));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const abort: ref;
axiom (abort == $sub.ref(0, 8259));
procedure  abort();
const main: ref;
axiom (main == $sub.ref(0, 9291));
procedure {:entrypoint} main()
  returns ($r: bv32)
{
$bb0:
  call $initialize();
  assume {:sourceloc "./output/functions_1-2_tmp.c", 6, 13} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "./output/functions_1-2_tmp.c", 6, 13} true;
  assume {:verifier.code 0} true;
  call reach_error();
  assume {:sourceloc "./output/functions_1-2_tmp.c", 6, 27} true;
  assume {:verifier.code 0} true;
  call abort();
  assume {:sourceloc "./output/functions_1-2_tmp.c", 6, 27} true;
  assume {:verifier.code 0} true;
  assume false;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 10323));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 11355));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 12387));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 13419));
procedure  __SMACK_check_overflow($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 14451));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 15483));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 16515));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 17547));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 18579));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 19611));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 20643));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 21675));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 22707));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 23739));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 24771));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 25803));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 26835));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 27867));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 28899));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 29931));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 30963));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 31995));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 33027));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 34059));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 35091));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 36123));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 37155));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 38187));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 39219));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 40251));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 41283));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 42315));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 43347));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 44379));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.ref($M.0, env_value_str, .str.1.1);
  $M.0 := $store.bytes.bv32($M.0, errno_global, 0bv32);
  call {:cexpr "errno_global"} boogie_si_record_bv32(0bv32);
  $exn := false;
  return;
}
procedure  boogie_si_record_bv32(x: bv32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
